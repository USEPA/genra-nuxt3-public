import {useAssayStore} from './assay/assay';
import {
  GENRA_DEFAULT_PARAMS,
} from './constants';
import {useFingerprintStore} from './fingerprint/fingerprint';
import {useRadialStore} from './radial/radial';
import {useReadAcrossStore} from './readAcross/readAcross';
import type {Params} from './types';
import type {SetupResponse} from '~/api/types';

export const useAppBaseStore = defineStore('appBaseStore', () => {
  // Epa header & Footer
  const showEpaHeaderAndFooter = ref(true);

  // steps
  const currentStep = ref(0);

  const setStep = (targetStep: number) => {
    if (targetStep > steps.length - 1) { return; }
    currentStep.value = targetStep;

    if (targetStep === 0) {
      resetState();
    }
  };

  // params
  const params = ref<Params>({...GENRA_DEFAULT_PARAMS});

  const resetParams = ({
    chemId, fp, flags,
  }: {
    chemId: string;
    fp: string;
    flags?: Flag;
  }) => {
    params.value = {
      fp: fp || 'chm_mrgn',
      ...(flags && {flags}),
      sel_by: 'tox_txrf',
      k0: 10,
      chem_id: chemId,
      summarise: 'tox_txrf',
      sumrs_by: 'tox_fp',
      s0: 0.1,
      neg0: 1,
      steps: 3,
      pos0: 1,
      engine: 'genrapred',
    };
  };

  // User in multi target or custom nn flow
  const isMultiTarget = computed(() => !!params.value.flags && params.value.flags === 'multitarget');

  const isCustomNn = computed(() => !!params.value.flags && params.value.flags === 'usernn');

  // Error message generated by API(or default) that displays in dialog
  const showErrorDialog = ref(false);
  const errorMsg = ref('');

  const showErrorHandler = (err: unknown) => {
    errorMsg.value = getErrorMsg(err);
    showErrorDialog.value = true;
  };

  // Setup response
  const setupResponse = ref <SetupResponse | Record<string, never>>({});

  const resetState = () => {
    params.value = GENRA_DEFAULT_PARAMS;
    currentStep.value = 0;
    errorMsg.value = '';
  };

  // Search

  /**
   * Called from user defined dialog.
   * @param chemical
   * @param predictionsChecked
   */
  const searchFromMultiTarget = (chemical: ChemicalEntry, predictionsChecked: boolean) => {
    params.value.flags = predictionsChecked ? 'multitarget' : 'usernn';
    params.value.chem_id = chemical.chem_id;
    setChemical(chemical);
  };

  /**
   * Called from TypeAhead search in NavBar. Removed flags param.
   * @param chemical
   */
  const searchWithoutFlags = async(searchString: string) => {
    // eslint-disable-next-line no-unused-vars
    const {flags, ...currentParams} = params.value;
    params.value = currentParams;
    await setChemical({
      chem_id: searchString,
    });
  };

  /**
   * Calls setup endpoint and sets all the assoicated data
   * This includes the dropdowns for Radial Panel(Neighbors by, Download, and Filter by options),
   * options/config for the neighborhood explorer, and helpTexts.
   */
  const setup = async(chemId: string) => {
    const {$repositores} = useNuxtApp();
    const setupData = await $repositores.genra.getSetup({
      chem_id: chemId,
      ...(params.value.flags && {flags: params.value.flags}),
    });
    if (setupData.error_msg) {
      throw new GenraApiError('', setupData.error_msg);
    }
    setupResponse.value = {
      ...setupData,
      neighbor_by: setupData.neighbor_by.filter(({data_exists: dataExists}) => dataExists),
      filter_by: setupData.filter_by.filter(({data_exists: dataExists}) => dataExists),
    };

    params.value.chem_id = setupData.chem_id;
    params.value.fp = setupResponse.value.neighbor_by[0]?.key ?? params.value.fp;
    params.value.flags = setupResponse.value.flags ?? params.value.flags;
  };

  /**
   * Called before starting GenRA Workflow. This is called when a user selects their
   * search result from either basic search, user defined search, ketcher search, or
   * custom nieghborhood search.
   * @param chemical
   */
  const setChemical = async(chemical: ChemicalEntry) => {
    try {
      if (!chemical.chem_id) {
        throw new GenraApiError('', GENERIC_CHEMICAL_ERROR_ENTRY_MSG);
      }

      await setup(chemical.chem_id);

      // This reset is completed to remove any params from user defined &
      // custom neighborhood if user is currently in that mode.
      resetParams({
        chemId: setupResponse.value.chem_id,
        ...(setupResponse.value.flags && {flags: setupResponse.value.flags}),
        fp: setupResponse.value.neighbor_by[0]?.key ?? params.value.fp,
      });
      await getGenraData();
    } catch (err) {
      showErrorHandler(err);
    }
  };

  const getGenraData = async() => {
    const {getRadialData, $patch: radialPatch} = useRadialStore();
    const {getFingerprintData, $patch: fpPatch} = useFingerprintStore();
    const {getAssayData, $patch: assayPatch} = useAssayStore();
    const {getReadAcrossData, $patch: readAcrossPatch} = useReadAcrossStore();

    // Radial
    radialPatch({
      isRadialPanelLoading: true,
    });
    await getRadialData();
    radialPatch({
      isRadialPanelLoading: false,
    });

    // Fingerprint and Assay panel are a part of the same step.
    fpPatch({
      isFingerprintLoading: true,
    });
    assayPatch({
      isAssayLoading: true,
    });
    await Promise.all([getFingerprintData(), getAssayData()]);
    fpPatch({
      isFingerprintLoading: false,
    });
    assayPatch({
      isAssayLoading: false,
    });

    // Read Across
    readAcrossPatch({
      isReadAcrossLoading: true,
    });
    await getReadAcrossData();

    if (currentStep.value > 3) {
      currentStep.value = 3;
    }
  };

  return {
    showEpaHeaderAndFooter,
    currentStep,
    params,
    errorMsg,
    resetState,
    setChemical,
    searchFromMultiTarget,
    showErrorHandler,
    setupResponse,
    getGenraData,
    showErrorDialog,
    searchWithoutFlags,
    isMultiTarget,
    isCustomNn,
    setStep,
  };
});
